import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { headers } from 'next/headers'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

interface CheatSheetRequest {
  title: string
  theme: 'nba' | 'nfl' | 'mlb' | 'nhl' | 'general'
  template: 'minimalist' | 'bold' | 'data-heavy' | 'modern'
  sections: CheatSheetSection[]
  insights?: string[]
}

interface CheatSheetSection {
  type: 'trend' | 'stat' | 'matchup' | 'prop' | 'insight'
  title: string
  data: Record<string, any>
}

export async function POST(req: NextRequest) {
  try {
    const headersList = await headers()
    const authorization = headersList.get('authorization')
    
    if (!authorization || !authorization.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Missing or invalid authorization header' },
        { status: 401 }
      )
    }

    const token = authorization.replace('Bearer ', '')
    
    // Verify the user's JWT token
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Invalid authentication token' },
        { status: 401 }
      )
    }

    const body: CheatSheetRequest = await req.json()

    // Generate cheat sheet data structure
    const cheatSheetData = await generateCheatSheetData(body)

    // Create downloadable image URL (we'll implement this next)
    const imageUrl = await generateCheatSheetImage(cheatSheetData, body.template)

    // Store cheat sheet for analytics
    await supabase
      .from('cheat_sheets')
      .insert({
        user_id: user.id,
        title: body.title,
        theme: body.theme,
        template: body.template,
        data: cheatSheetData,
        image_url: imageUrl,
        created_at: new Date().toISOString()
      })

    return NextResponse.json({
      success: true,
      cheatSheet: cheatSheetData,
      imageUrl,
      shareUrl: `${process.env.NEXT_PUBLIC_APP_URL}/cheat-sheet/${cheatSheetData.id}`
    })
  } catch (error) {
    console.error('Cheat sheet generation error:', error)
    return NextResponse.json(
      { error: 'Failed to generate cheat sheet' },
      { status: 500 }
    )
  }
}

async function generateCheatSheetData(request: CheatSheetRequest) {
  // This will be enriched with real data from your database
  return {
    id: `cs_${Date.now()}`,
    title: request.title,
    theme: request.theme,
    template: request.template,
    sections: request.sections,
    insights: request.insights || [],
    generatedAt: new Date().toISOString(),
    watermark: 'ðŸŽ¯ Generated by Professor Lock @ Predictive Play'
  }
}

async function generateCheatSheetImage(data: any, template: string): Promise<string> {
  // Using @vercel/og for serverless-compatible image generation
  return `/api/chatkit/render-cheat-sheet-og?id=${data.id}&template=${template}`
}
