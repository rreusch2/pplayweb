"use client"

import { useCallback } from 'react'
import { toast } from 'react-hot-toast'

interface CheatSheetAction {
  type: 'download_cheat_sheet' | 'share_cheat_sheet' | 'regenerate_cheat_sheet'
  payload: {
    id?: string
    imageUrl?: string
    shareUrl?: string
    title?: string
  }
}

/**
 * Cheat Sheet Action Handler
 * 
 * Handles client-side actions for cheat sheet widgets:
 * - Download cheat sheet as PNG
 * - Share cheat sheet via Web Share API or copy link
 * - Regenerate with different template
 */
export function useCheatSheetActions() {
  
  const handleDownloadCheatSheet = useCallback(async (imageUrl: string, id: string) => {
    try {
      // Fetch the image
      const response = await fetch(imageUrl)
      const blob = await response.blob()
      
      // Create download link
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `predictive-play-cheatsheet-${id}.png`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      window.URL.revokeObjectURL(url)
      
      toast.success('ðŸŽ¯ Cheat sheet downloaded!')
    } catch (error) {
      console.error('Download error:', error)
      toast.error('Failed to download cheat sheet')
    }
  }, [])

  const handleShareCheatSheet = useCallback(async (shareUrl: string, title: string) => {
    try {
      // Check if Web Share API is available
      if (navigator.share) {
        await navigator.share({
          title: title,
          text: `Check out this betting cheat sheet from Predictive Play! ðŸŽ¯`,
          url: shareUrl
        })
        toast.success('Shared successfully!')
      } else {
        // Fallback: Copy to clipboard
        await navigator.clipboard.writeText(shareUrl)
        toast.success('ðŸ”— Link copied to clipboard!')
      }
    } catch (error) {
      // User cancelled or error occurred
      if ((error as Error).name !== 'AbortError') {
        console.error('Share error:', error)
        // Try clipboard as final fallback
        try {
          await navigator.clipboard.writeText(shareUrl)
          toast.success('ðŸ”— Link copied to clipboard!')
        } catch (clipboardError) {
          toast.error('Failed to share')
        }
      }
    }
  }, [])

  const handleCheatSheetAction = useCallback((action: CheatSheetAction) => {
    switch (action.type) {
      case 'download_cheat_sheet':
        if (action.payload.imageUrl && action.payload.id) {
          handleDownloadCheatSheet(action.payload.imageUrl, action.payload.id)
        }
        break
        
      case 'share_cheat_sheet':
        if (action.payload.shareUrl && action.payload.title) {
          handleShareCheatSheet(action.payload.shareUrl, action.payload.title)
        }
        break
        
      case 'regenerate_cheat_sheet':
        // This will be handled by the server through the widget action endpoint
        toast.success('Regenerating with new template...')
        break
        
      default:
        console.warn('Unknown cheat sheet action:', action.type)
    }
  }, [handleDownloadCheatSheet, handleShareCheatSheet])

  return { handleCheatSheetAction }
}

/**
 * Helper function to enhance cheat sheet with social sharing metadata
 */
export function getCheatSheetMetadata(cheatSheet: any) {
  return {
    title: cheatSheet.title,
    description: `Betting insights and trends generated by Professor Lock AI`,
    image: cheatSheet.imageUrl,
    url: cheatSheet.shareUrl,
    type: 'article',
    
    // Open Graph tags
    og: {
      title: cheatSheet.title,
      description: 'Get AI-powered betting insights with Predictive Play',
      image: cheatSheet.imageUrl,
      url: cheatSheet.shareUrl,
      type: 'article'
    },
    
    // Twitter Card tags
    twitter: {
      card: 'summary_large_image',
      title: cheatSheet.title,
      description: 'AI-powered betting insights',
      image: cheatSheet.imageUrl
    }
  }
}
